import { Router } from 'express';
import { SlicingSettings } from '../types/slicing.js';

const router = Router();

// Analyze 3D model and get characteristics
router.post('/analyze', async (req, res) => {
  try {
    const { filePath } = req.body;

    if (!filePath) {
      return res.status(400).json({ error: 'File path is required' });
    }

    // Mock analysis for now - in production, this would use a library like three.js
    // or call external slicing software to analyze the model
    const analysis = {
      volume: 15000, // mm³
      surfaceArea: 8500, // mm²
      boundingBox: {
        x: 50,
        y: 45,
        z: 30
      },
      overhangs: [
        { angle: 55, area: 200 }
      ],
      thinWalls: false,
      bridging: true,
      estimatedPrintTime: 7200, // seconds
      estimatedMaterialUsage: 25 // grams
    };

    res.json({
      success: true,
      analysis
    });
  } catch (error) {
    console.error('Analysis error:', error);
    res.status(500).json({ error: 'Failed to analyze model' });
  }
});

// Generate G-code from settings
router.post('/generate-gcode', async (req, res) => {
  try {
    const { filePath, settings } = req.body;

    if (!filePath || !settings) {
      return res.status(400).json({ error: 'File path and settings are required' });
    }

    // Mock G-code generation
    // In production, this would integrate with CuraEngine or similar
    const gcode = generateMockGCode(settings as SlicingSettings);

    res.json({
      success: true,
      gcode,
      metadata: {
        layerCount: Math.floor(settings.boundingBoxZ / settings.layerHeight),
        estimatedTime: '2h 15m',
        filamentLength: '15.5m',
        filamentWeight: '45g'
      }
    });
  } catch (error) {
    console.error('G-code generation error:', error);
    res.status(500).json({ error: 'Failed to generate G-code' });
  }
});

// Validate slicing settings
router.post('/validate', async (req, res) => {
  try {
    const { settings, printerProfile } = req.body;

    const validationErrors: string[] = [];

    // Validate settings against printer capabilities
    if (settings.layerHeight < 0.05 || settings.layerHeight > 0.4) {
      validationErrors.push('Layer height must be between 0.05mm and 0.4mm');
    }

    if (settings.printSpeed > printerProfile.maxPrintSpeed) {
      validationErrors.push(`Print speed exceeds printer maximum (${printerProfile.maxPrintSpeed} mm/s)`);
    }

    if (settings.printingTemperature > printerProfile.maxTemperature) {
      validationErrors.push(`Temperature exceeds printer maximum (${printerProfile.maxTemperature}°C)`);
    }

    res.json({
      valid: validationErrors.length === 0,
      errors: validationErrors
    });
  } catch (error) {
    console.error('Validation error:', error);
    res.status(500).json({ error: 'Failed to validate settings' });
  }
});

function generateMockGCode(settings: SlicingSettings): string {
  return `; Generated by AIPMS
; Print settings:
; Layer height: ${settings.layerHeight}mm
; Infill: ${settings.infillDensity}%
; Print speed: ${settings.printSpeed}mm/s
; Temperature: ${settings.printingTemperature}°C

G28 ; Home all axes
G1 Z5 F5000 ; Lift nozzle
M109 S${settings.printingTemperature} ; Set and wait for nozzle temp
M190 S${settings.buildPlateTemperature} ; Set and wait for bed temp

; Start printing
G1 X0 Y0 Z${settings.initialLayerHeight} F${settings.travelSpeed * 60}
; ... (actual print commands would be here)

M104 S0 ; Turn off hotend
M140 S0 ; Turn off bed
G28 X0 ; Home X axis
M84 ; Disable motors
`;
}

export default router;
